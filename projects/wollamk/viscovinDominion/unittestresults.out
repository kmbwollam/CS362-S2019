----------------- Testing Card: great_hall ----------------

TEST 1: choice 1 = 1 
hand count = 5, expected = 5
total card count = 9, expected = 10
actions count = 2, expected = 2
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: choice 2 = 1 
hand count = 5, expected = 5
total card count = 9, expected = 10
actions count = 2, expected = 2
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: Choice 3 = 1 
hand count = 5, expected = 5
total card count = 9, expected = 10
actions count = 2, expected = 2
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete great_hall <<<<<

----------------- Testing Card: village ----------------

TEST 1: choice 1 = 1 
hand count = 4, expected = 5
total card count = 9, expected = 10
actions count = 3, expected = 3
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: choice 2 = 1 
hand count = 4, expected = 5
total card count = 9, expected = 10
actions count = 3, expected = 3
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: Choice 3 = 1 
hand count = 4, expected = 5
total card count = 9, expected = 10
actions count = 3, expected = 3
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: remodel ----------------

TEST 1: trash copper get estate
hand count = 3, expected = 3
total card count = 9, expected = 10
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: trash estate get copper
hand count = 5, expected = 3
total card count = 10, expected = 10
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: trash estate get estate 
hand count = 5, expected = 3
total card count = 10, expected = 10
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete remodel <<<<<

----------------- Testing Card: smithy ----------------

TEST 1: first run of card 
hand count = 11, expected = 12
total card count = 14, expected = 15
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: second call same card 
hand count = 12, expected = 14
total card count = 13, expected = 15
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: third time played 
hand count = 12, expected = 16
total card count = 12, expected = 15
actions count = 1, expected = 1
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: minion ----------------

TEST 1: choice 2 & both players 5+ cards
hand count = 4, expected = 4
actions count = 2, expected = 2
other player hand count = 4, expected <= 6
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: card player 5+ cards, other player <5 cards 
hand count = 4, expected = 4
actions count = 2, expected = 2
other player hand count = 4, expected <= 4
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: both players less than 5 cards 
hand count = 4, expected = 4
actions count = 2, expected = 2
other player hand count = 4, expected <= 4
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete minion <<<<<

----------------- Testing Card: council_room ----------------

TEST 1: enough cards in draw deck
hand count = 8, expected = 8
total card count = 9, expected = 10
other player hand count = 1, expected = 1
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: not enough cards in draw pile, shuffle required
hand count = 8, expected = 8
total card count = 10, expected = 11
other player hand count = 1, expected = 1
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: not enough cards in draw or discard
hand count = 6, expected < 8
total card count = 6, expected = 7
other player hand count = 1, expected = 1
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: adventurer ----------------

TEST 1: enough cards in draw deck
hand count = 7, expected = 6
total card count = 35, expected = 35
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: not enough cards in draw pile, shuffle required
hand count = 3, expected = 2
total card count = 61, expected = 61
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: not enough cards in draw or discard
hand count = 3, expected = 2
total card count = 31, expected = 31
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----------------- Testing Card: smithy ----------------

TEST 1: enough cards in draw deck
hand count = 6, expected = 7
total card count = 9, expected = 10
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 2: not enough cards in draw pile, shuffle required
hand count = 6, expected = 7
total card count = 9, expected = 10
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

TEST 3: not enough cards in draw or discard
hand count = 5, expected < 7
total card count = 5, expected = 6
other player hand count = 0, expected = 0
other player total card count = 10, expected = 10
players: 2 expected: 2
turn: 0 expected 0
phase: 0 expected 0

 >>>>> SUCCESS: Testing complete smithy <<<<<

Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:61.54% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:21.18% of 203

Function 'cardEffectSteward'
Lines executed:0.00% of 11

Function 'cardEffectHall'
Lines executed:100.00% of 6

Function 'cardEffectVillage'
Lines executed:100.00% of 5

Function 'cardEffectCouncil'
Lines executed:100.00% of 9

Function 'cardEffectSmithy'
Lines executed:100.00% of 6

Function 'cardEffectAdventurer'
Lines executed:70.59% of 17

Function 'getCost'
Lines executed:13.33% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:100.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:37.79% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      496:    8:int compare(const void* a, const void* b) {
      496:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      496:   11:  if (*(int*)a < *(int*)b)
      128:   12:    return -1;
      368:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
       16:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       16:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:	for (i = 0; i < 10; i++){
     1760:   58:		for (j = 0; j < 10; j++){
     1600:   59:			if (j != i && kingdomCards[j] == kingdomCards[i]){
    #####:   60:				return -1;
        -:   61:			}
        -:   62:		}
        -:   63:	}
        -:   64:
        -:   65:
        -:   66:  //initialize supply
        -:   67:  ///////////////////////////////
        -:   68:
        -:   69:  //set number of Curse cards
       16:   70:  if (numPlayers == 2)
        -:   71:    {
       16:   72:      state->supplyCount[curse] = 10;
        -:   73:    }
    #####:   74:  else if (numPlayers == 3)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 20;
        -:   77:    }
        -:   78:  else
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 30;
        -:   81:    }
        -:   82:
        -:   83:  //set number of Victory cards
       16:   84:  if (numPlayers == 2)
        -:   85:    {
       16:   86:      state->supplyCount[estate] = 8;
       16:   87:      state->supplyCount[duchy] = 8;
       16:   88:      state->supplyCount[province] = 8;
        -:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[estate] = 12;
    #####:   93:      state->supplyCount[duchy] = 12;
    #####:   94:      state->supplyCount[province] = 12;
        -:   95:    }
        -:   96:
        -:   97:  //set number of Treasure cards
       16:   98:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:   99:  state->supplyCount[silver] = 40;
       16:  100:  state->supplyCount[gold] = 30;
        -:  101:
        -:  102:  //set number of Kingdom cards
      336:  103:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  104:    {
     2640:  105:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  106:	{
     2480:  107:	  if (kingdomCards[j] == i)
        -:  108:	    {
        -:  109:	      //check if card is a 'Victory' Kingdom card
      160:  110:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  111:		{
       32:  112:		  if (numPlayers == 2){ 
       16:  113:		    state->supplyCount[i] = 8; 
        -:  114:		  }
    #####:  115:		  else{ state->supplyCount[i] = 12; }
        -:  116:		}
        -:  117:	      else
        -:  118:		{
      144:  119:		  state->supplyCount[i] = 10;
        -:  120:		}
      160:  121:	      break;
        -:  122:	    }
        -:  123:	  else    //card is not in the set choosen for the game
        -:  124:	    {
     2320:  125:	      state->supplyCount[i] = -1;
        -:  126:	    }
        -:  127:	}
        -:  128:
        -:  129:    }
        -:  130:
        -:  131:  ////////////////////////
        -:  132:  //supply intilization complete
        -:  133:
        -:  134:  //set player decks
       48:  135:  for (i = 0; i < numPlayers; i++)
        -:  136:    {
       32:  137:      state->deckCount[i] = 0;
      128:  138:      for (j = 0; j < 3; j++)
        -:  139:	{
       96:  140:	  state->deck[i][j] = estate;
       96:  141:	  state->deckCount[i]++;
        -:  142:	}
      256:  143:      for (j = 3; j < 10; j++)
        -:  144:	{
      224:  145:	  state->deck[i][j] = copper;
      224:  146:	  state->deckCount[i]++;		
        -:  147:	}
        -:  148:    }
        -:  149:
        -:  150:  //shuffle player decks
       48:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       32:  153:      if ( shuffle(i, state) < 0 )
        -:  154:	{
    #####:  155:	  return -1;
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //draw player hands
       48:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {  
        -:  162:      //initialize hand size to zero
       32:  163:      state->handCount[i] = 0;
       32:  164:      state->discardCount[i] = 0;
        -:  165:      //draw 5 cards
        -:  166:      // for (j = 0; j < 5; j++)
        -:  167:      //	{
        -:  168:      //	  drawCard(i, state);
        -:  169:      //	}
        -:  170:    }
        -:  171:  
        -:  172:  //set embargo tokens to 0 for all supply piles
      448:  173:  for (i = 0; i <= treasure_map; i++)
        -:  174:    {
      432:  175:      state->embargoTokens[i] = 0;
        -:  176:    }
        -:  177:
        -:  178:  //initialize first player's turn
       16:  179:  state->outpostPlayed = 0;
       16:  180:  state->phase = 0;
       16:  181:  state->numActions = 1;
       16:  182:  state->numBuys = 1;
       16:  183:  state->playedCardCount = 0;
       16:  184:  state->whoseTurn = 0;
       16:  185:  state->handCount[state->whoseTurn] = 0;
        -:  186:  //int it; move to top
        -:  187:
        -:  188:  //Moved draw cards to here, only drawing at the start of a turn
       96:  189:  for (it = 0; it < 5; it++){
       80:  190:    drawCard(state->whoseTurn, state);
        -:  191:  }
        -:  192:
       16:  193:  updateCoins(state->whoseTurn, state, 0);
        -:  194:
       16:  195:  return 0;
        -:  196:}
        -:  197:
       44:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
       44:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
       44:  206:  if (state->deckCount[player] < 1)
        8:  207:    return -1;
       36:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
      408:  211:  while (state->deckCount[player] > 0) {
      336:  212:    card = floor(Random() * state->deckCount[player]);
      336:  213:    newDeck[newDeckPos] = state->deck[player][card];
      336:  214:    newDeckPos++;
     1160:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
      824:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
      336:  218:    state->deckCount[player]--;
        -:  219:  }
      372:  220:  for (i = 0; i < newDeckPos; i++) {
      336:  221:    state->deck[player][i] = newDeck[i];
      336:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
       36:  225:  return 0;
        -:  226:}
        -:  227:
    #####:  228:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  229:{	
        -:  230:  int card;
    #####:  231:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  232:
        -:  233:  //check if it is the right phase
    #####:  234:  if (state->phase != 0)
        -:  235:    {
    #####:  236:      return -1;
        -:  237:    }
        -:  238:	
        -:  239:  //check if player has enough actions
    #####:  240:  if ( state->numActions < 1 )
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //get card played
    #####:  246:  card = handCard(handPos, state);
        -:  247:	
        -:  248:  //check if selected card is an action
    #####:  249:  if ( card < adventurer || card > treasure_map )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //play card
    #####:  255:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //reduce number of actions
    #####:  261:  state->numActions--;
        -:  262:
        -:  263:  //update coins (Treasure cards may be added with card draws)
    #####:  264:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  265:	
    #####:  266:  return 0;
        -:  267:}
        -:  268:
    #####:  269:int buyCard(int supplyPos, struct gameState *state) {
        -:  270:  int who;
        -:  271:  if (DEBUG){
        -:  272:    printf("Entering buyCard...\n");
        -:  273:  }
        -:  274:
        -:  275:  // I don't know what to do about the phase thing.
        -:  276:
    #####:  277:  who = state->whoseTurn;
        -:  278:
    #####:  279:  if (state->numBuys < 1){
        -:  280:    if (DEBUG)
        -:  281:      printf("You do not have any buys left\n");
    #####:  282:    return -1;
    #####:  283:  } else if (supplyCount(supplyPos, state) <1){
        -:  284:    if (DEBUG)
        -:  285:      printf("There are not any of that type of card left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (state->coins < getCost(supplyPos)){
        -:  288:    if (DEBUG) 
        -:  289:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  290:    return -1;
        -:  291:  } else {
    #####:  292:    state->phase=1;
        -:  293:    //state->supplyCount[supplyPos]--;
    #####:  294:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  295:  
    #####:  296:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  297:    state->numBuys--;
        -:  298:    if (DEBUG)
        -:  299:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  300:  }
        -:  301:
        -:  302:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  303:  //state->discardCount[who]++;
        -:  304:    
    #####:  305:  return 0;
        -:  306:}
        -:  307:
       32:  308:int numHandCards(struct gameState *state) {
       32:  309:  return state->handCount[ whoseTurn(state) ];
        -:  310:}
        -:  311:
    #####:  312:int handCard(int handPos, struct gameState *state) {
    #####:  313:  int currentPlayer = whoseTurn(state);
    #####:  314:  return state->hand[currentPlayer][handPos];
        -:  315:}
        -:  316:
        2:  317:int supplyCount(int card, struct gameState *state) {
        2:  318:  return state->supplyCount[card];
        -:  319:}
        -:  320:
    #####:  321:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  322:  int i;
    #####:  323:  int count = 0;
        -:  324:
    #####:  325:  for (i = 0; i < state->deckCount[player]; i++)
        -:  326:    {
    #####:  327:      if (state->deck[player][i] == card) count++;
        -:  328:    }
        -:  329:
    #####:  330:  for (i = 0; i < state->handCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->hand[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->discardCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->discard[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  return count;
        -:  341:}
        -:  342:
      516:  343:int whoseTurn(struct gameState *state) {
      516:  344:  return state->whoseTurn;
        -:  345:}
        -:  346:
    #####:  347:int endTurn(struct gameState *state) {
        -:  348:  int k;
        -:  349:  int i;
    #####:  350:  int currentPlayer = whoseTurn(state);
        -:  351:  
        -:  352:  //Discard hand
    #####:  353:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  354:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  355:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  356:  }
    #####:  357:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  358:    
        -:  359:  //Code for determining the player
    #####:  360:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  361:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  362:  }
        -:  363:  else{
    #####:  364:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  365:  }
        -:  366:
    #####:  367:  state->outpostPlayed = 0;
    #####:  368:  state->phase = 0;
    #####:  369:  state->numActions = 1;
    #####:  370:  state->coins = 0;
    #####:  371:  state->numBuys = 1;
    #####:  372:  state->playedCardCount = 0;
    #####:  373:  state->handCount[state->whoseTurn] = 0;
        -:  374:
        -:  375:  //int k; move to top
        -:  376:  //Next player draws hand
    #####:  377:  for (k = 0; k < 5; k++){
    #####:  378:    drawCard(state->whoseTurn, state);//Draw a card
        -:  379:  }
        -:  380:
        -:  381:  //Update money
    #####:  382:  updateCoins(state->whoseTurn, state , 0);
        -:  383:
    #####:  384:  return 0;
        -:  385:}
        -:  386:
    #####:  387:int isGameOver(struct gameState *state) {
        -:  388:  int i;
        -:  389:  int j;
        -:  390:	
        -:  391:  //if stack of Province cards is empty, the game ends
    #####:  392:  if (state->supplyCount[province] == 0)
        -:  393:    {
    #####:  394:      return 1;
        -:  395:    }
        -:  396:
        -:  397:  //if three supply pile are at 0, the game ends
    #####:  398:  j = 0;
    #####:  399:  for (i = 0; i < 25; i++)
        -:  400:    {
    #####:  401:      if (state->supplyCount[i] == 0)
        -:  402:	{
    #####:  403:	  j++;
        -:  404:	}
        -:  405:    }
    #####:  406:  if ( j >= 3)
        -:  407:    {
    #####:  408:      return 1;
        -:  409:    }
        -:  410:
    #####:  411:  return 0;
        -:  412:}
        -:  413:
    #####:  414:int scoreFor (int player, struct gameState *state) {
        -:  415:
        -:  416:  int i;
    #####:  417:  int score = 0;
        -:  418:  //score from hand
    #####:  419:  for (i = 0; i < state->handCount[player]; i++)
        -:  420:    {
    #####:  421:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  422:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  423:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  424:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  425:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  427:    }
        -:  428:
        -:  429:  //score from discard
    #####:  430:  for (i = 0; i < state->discardCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  438:    }
        -:  439:
        -:  440:  //score from deck
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  444:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  445:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  446:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  447:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  449:    }
        -:  450:
    #####:  451:  return score;
        -:  452:}
        -:  453:
    #####:  454:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  455:  int i;	
        -:  456:  int j;
        -:  457:  int highScore;
        -:  458:  int currentPlayer;
        -:  459:
        -:  460:  //get score for each player
    #####:  461:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  462:    {
        -:  463:      //set unused player scores to -9999
    #####:  464:      if (i >= state->numPlayers)
        -:  465:	{
    #####:  466:	  players[i] = -9999;
        -:  467:	}
        -:  468:      else
        -:  469:	{
    #####:  470:	  players[i] = scoreFor (i, state);
        -:  471:	}
        -:  472:    }
        -:  473:
        -:  474:  //find highest score
    #####:  475:  j = 0;
    #####:  476:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  477:    {
    #####:  478:      if (players[i] > players[j])
        -:  479:	{
    #####:  480:	  j = i;
        -:  481:	}
        -:  482:    }
    #####:  483:  highScore = players[j];
        -:  484:
        -:  485:  //add 1 to players who had less turns
    #####:  486:  currentPlayer = whoseTurn(state);
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if ( players[i] == highScore && i > currentPlayer )
        -:  490:	{
    #####:  491:	  players[i]++;
        -:  492:	}
        -:  493:    }
        -:  494:
        -:  495:  //find new highest score
    #####:  496:  j = 0;
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] > players[j] )
        -:  500:	{
    #####:  501:	  j = i;
        -:  502:	}
        -:  503:    }
    #####:  504:  highScore = players[j];
        -:  505:
        -:  506:  //set winners in array to 1 and rest to 0
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore )
        -:  510:	{
    #####:  511:	  players[i] = 1;
        -:  512:	}
        -:  513:      else
        -:  514:	{
    #####:  515:	  players[i] = 0;
        -:  516:	}
        -:  517:    }
        -:  518:
    #####:  519:  return 0;
        -:  520:}
        -:  521:
      184:  522:int drawCard(int player, struct gameState *state){	
        -:  523:  int count;
        -:  524:  int deckCounter;
        -:  525:  //Deck is empty
      184:  526:  if (state->deckCount[player] <= 0){
        -:  527:    //Step 1 Shuffle the discard pile back into a deck
        -:  528:    int i;
        -:  529:    //Move discard to deck
       28:  530:    for (i = 0; i < state->discardCount[player];i++){
       16:  531:      state->deck[player][i] = state->discard[player][i];
       16:  532:      state->discard[player][i] = -1;
        -:  533:    }
        -:  534:
       12:  535:    state->deckCount[player] = state->discardCount[player];
       12:  536:    state->discardCount[player] = 0;//Reset discard
        -:  537:
        -:  538:    //Shufffle the deck
        -:  539:	//Shuffle the deck up and make it so that we can draw
       12:  540:    shuffle(player, state);
        -:  541:   
        -:  542:    //Debug statements
        -:  543:    if (DEBUG){
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       12:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        -:  550:	//Get current player's hand count
       12:  551:    count = state->handCount[player];
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    //Create a holder for the deck count
       12:  557:    deckCounter = state->deckCount[player];
        -:  558:
       12:  559:    if (deckCounter == 0)
        8:  560:      return -1;
        -:  561:	//Add card to hand
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];
        4:  563:    state->deckCount[player]--;
        -:  564:	//Increment hand count
        4:  565:    state->handCount[player]++;
        -:  566:  }
        -:  567:
        -:  568:  else{
        -:  569:	//Get current hand count for player
      172:  570:    int count = state->handCount[player];
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:	//Create holder for the deck count
      172:  576:    deckCounter = state->deckCount[player];
        -:  577:	//Add card to the hand
      172:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];
      172:  579:    state->deckCount[player]--;
        -:  580:	//Increment hand count
      172:  581:    state->handCount[player]++;
        -:  582:  }
        -:  583:
      176:  584:  return 0;
        -:  585:}
        -:  586:
       12:  587:int getCost(int cardNumber)
        -:  588:{
       12:  589:  switch( cardNumber ) 
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
        8:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
        4:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
        -:  650://----------------------------------- REFACTORED FUNCTIONS ------------------------------------- 
        -:  651:
        -:  652://----------------------------------------------------------------------------------------------
        -:  653://  FUNCTION: int cardEffectAdventurer(struct gameState *state)
        -:  654://  Reveals cards from  deck until two treasure cards are revealed. Place treasure cards in 
        -:  655://  to hand and discard any revealed cards that were not treasure. 
        -:  656://----------------------------------------------------------------------------------------------
        6:  657:int cardEffectAdventurer(struct gameState *state){
        6:  658:	int drawntreasure=0;
        6:  659:	int currentPlayer = whoseTurn(state);
        -:  660:	int cardDrawn;
        -:  661:	int temphand[MAX_HAND];
        6:  662:	int z = 0;   			// this is the counter for the temp hand
        -:  663:	
       24:  664:	while(drawntreasure<2){
       12:  665:		if (state->deckCount[currentPlayer] <1){	//if the deck is empty we need to shuffle discard and add to deck
    #####:  666:			shuffle(currentPlayer, state);
        -:  667:		}
       12:  668:		drawCard(currentPlayer, state);
       12:  669:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       12:  670:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
       12:  671:			drawntreasure++;
        -:  672:		}
        -:  673:		else{
        -:  674:			//temphand[z]=cardDrawn;
    #####:  675:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:			z++;
        -:  677:		}
        -:  678:    }
        -:  679:    
       12:  680:	while(z-1>=0){
    #####:  681:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:		z=z-1;
        -:  683:    }
        6:  684:    return 0;
        -:  685:}
        -:  686:
        -:  687://------------------------------------------------------------------------------------------
        -:  688://  FUNCTION: int cardEffectSmithy(struct gameState *state, int handPos) 
        -:  689://  Add 3 cards to hand 
        -:  690://------------------------------------------------------------------------------------------
       12:  691:int cardEffectSmithy(struct gameState *state, int handPos) {
        -:  692:	int i;
       12:  693:	int currentPlayer = whoseTurn(state);
        -:  694:	
        -:  695:	//---------------BUG
        -:  696:	//+3 Cards
       36:  697:    for (i = 1; i < 3; i++){
       24:  698:	  drawCard(currentPlayer, state);
        -:  699:	}	
        -:  700:    //discard card from hand
       12:  701:    discardCard(handPos, currentPlayer, state, 0);
       12:  702:    return 0;
        -:  703:}
        -:  704:
        -:  705://---------------------------------------------------------------------------------------------
        -:  706://  FUNCTION: cardEffectCouncil (struct gameState *state, int handPos)
        -:  707://  Add 4 cards to hand and add one extra buy. Each other player draws a card  
        -:  708://---------------------------------------------------------------------------------------------
        6:  709:int cardEffectCouncil(struct gameState *state, int handPos) {
        -:  710:	int i; 
        6:  711:	int currentPlayer = whoseTurn(state);
        -:  712:	//+4 Cards
       30:  713:    for (i = 0; i < 4; i++){
       24:  714:	  drawCard(currentPlayer, state);
        -:  715:	}
        -:  716:	
        -:  717:    //----------------BUG
        -:  718:	//+1 Buy
        -:  719:    //state->numBuys++;		
        -:  720:    
        -:  721:	//Each other player draws a card
       18:  722:    for (i = 0; i < state->numPlayers; i++){
       12:  723:		if ( i != currentPlayer ){
        6:  724:	      drawCard(i, state);
        -:  725:	    }
        -:  726:	}
        -:  727:	//put played card in played card pile
        6:  728:    discardCard(handPos, currentPlayer, state, 0);		
        6:  729:    return 0;
        -:  730:}
        -:  731:
        -:  732://---------------------------------------------------------------------------------------------
        -:  733://  FUNCTION: cardEffectVillage (struct gameState *state, int handPos)
        -:  734://  Add one card to hand and two actions
        -:  735://---------------------------------------------------------------------------------------------
      206:  736:int cardEffectVillage(struct gameState *state, int handPos){
      206:  737:	int currentPlayer = whoseTurn(state);
        -:  738:    //------------------BUG
        -:  739:	//+1 Card
        -:  740:    //drawCard(currentPlayer, state);
        -:  741:			
        -:  742:    //+2 Actions
      206:  743:    state->numActions = state->numActions + 2;
        -:  744:			
        -:  745:    //discard played card from hand
      206:  746:    discardCard(handPos, currentPlayer, state, 0);
      206:  747:    return 0;
        -:  748:}
        -:  749:
        -:  750://---------------------------------------------------------------------------------------------
        -:  751://  FUNCTION: cardEffectHall (struct gameState *state, int handPos)
        -:  752://  Add one card to hand and one action. This cards is worth 1 victory point at the end of the 
        -:  753://  game. 
        -:  754://---------------------------------------------------------------------------------------------
        6:  755:int cardEffectHall(struct gameState *state, int handPos){
        6:  756:	int currentPlayer = whoseTurn(state);
        -:  757:	//+1 Card
        6:  758:    drawCard(currentPlayer, state);
        -:  759:			
        -:  760:    //+1 Actions
        6:  761:    state->numActions++;
        -:  762:			
        -:  763:    //discard card from hand
        6:  764:    discardCard(handPos, currentPlayer, state, 0);
        6:  765:    return 0;
        -:  766:}
        -:  767://---------------------------------------------------------------------------------------------
        -:  768://  FUNCTION: cardEffectSteward (struct gameState *state, int handPos)
        -:  769://  Choice1 = 1 Add 2 cards to hand
        -:  770://	Choice1 = 2 Add 2 coinds to buy stage; 
        -:  771://  Else = Trash 2 cards from your hand.
        -:  772://---------------------------------------------------------------------------------------------
    #####:  773:int cardEffectSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos){
    #####:  774:   int currentPlayer = whoseTurn(state);
    #####:  775:   if (choice1 == 1)
        -:  776:	{
        -:  777:	  //+2 cards
    #####:  778:	  drawCard(currentPlayer, state);
    #####:  779:	  drawCard(currentPlayer, state);
        -:  780:	}
    #####:  781:      else if (choice1 == 2)
        -:  782:	{
        -:  783:	  //+2 coins
    #####:  784:	  state->coins = state->coins + 2;
        -:  785:	}
        -:  786:      else
        -:  787:	{
        -:  788:	  //trash 2 cards in hand
    #####:  789:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  790:	  discardCard(choice3, currentPlayer, state, 1);
        -:  791:	}
        -:  792:			
        -:  793:      //discard card from hand
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
    #####:  795:      return 0;
        -:  796:}
        -:  797://--------------------------------------------------------------------------------------------------------------------
        -:  798:
      248:  799:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  800:  int i;
        -:  801:  int j;
        -:  802:  int k;
        -:  803:  int x;
        -:  804:  int index;
        -:  805:  int cardEffectReturn; 
      248:  806:  int currentPlayer = whoseTurn(state);
      248:  807:  int nextPlayer = currentPlayer + 1;
        -:  808:
      248:  809:  int tributeRevealedCards[2] = {-1, -1};
        -:  810:  int temphand[MAX_HAND];// moved above the if statement
        -:  811:  //int drawntreasure=0;
        -:  812:  //int cardDrawn;
        -:  813:  //int z = 0;// this is the counter for the temp hand
      248:  814:  if (nextPlayer > (state->numPlayers - 1)){
       80:  815:    nextPlayer = 0;
        -:  816:  }
        -:  817:  
        -:  818://-------------------------------------NEW INSERTED CODE-----------------------------------//	
        -:  819:/*	Got rid of this code and integrated the refactored functions into the switch as adviced 
        -:  820://	by instructor on Assignment 2 comments.
        -:  821:--------------------------------------------------------------------------------------------
        -:  822:	if (card == adventurer){
        -:  823:		cardEffectReturn = cardEffectAdventurer(state); 
        -:  824:		return cardEffectReturn; 
        -:  825:	}
        -:  826:	else if (card == smithy){
        -:  827:		cardEffectReturn = cardEffectSmithy(state,handPos); 
        -:  828:		return cardEffectReturn; 
        -:  829:	}
        -:  830:	else if (card == council_room) {
        -:  831:		cardEffectReturn = cardEffectCouncil(state,handPos); 
        -:  832:		return cardEffectReturn; 
        -:  833:	}
        -:  834:	else if (card == village) {
        -:  835:		cardEffectReturn = cardEffectVillage(state,handPos);
        -:  836:		return cardEffectReturn; 
        -:  837:	}
        -:  838:	else if (card == great_hall) {
        -:  839:		cardEffectReturn = cardEffectHall(state,handPos);
        -:  840:	    return cardEffectReturn;
        -:  841:	}
        -:  842://---------------------------------------------------------------------------------*/	
        -:  843:  
        -:  844:  //uses switch to select card and perform actions
      248:  845:  switch( card ) {
        -:  846:	case adventurer:
        6:  847:		cardEffectReturn = cardEffectAdventurer(state);
        6:  848:		return cardEffectReturn; 
        -:  849:	  /*while(drawntreasure<2){
        -:  850:			if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:				shuffle(currentPlayer, state);
        -:  852:			}
        -:  853:			drawCard(currentPlayer, state);
        -:  854:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:				drawntreasure++;
        -:  857:			else{
        -:  858:				temphand[z]=cardDrawn;
        -:  859:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:				z++;
        -:  861:			}
        -:  862:		}
        -:  863:		while(z-1>=0){
        -:  864:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:			z=z-1;
        -:  866:		}
        -:  867:		return 0;
        -:  868:	  */		
        -:  869:    case council_room:
        6:  870:		cardEffectReturn = cardEffectCouncil(state,handPos);
        6:  871:		return cardEffectReturn;
        -:  872:		/*  //+4 Cards
        -:  873:		for (i = 0; i < 4; i++){
        -:  874:			drawCard(currentPlayer, state);
        -:  875:		}
        -:  876:			
        -:  877:		//+1 Buy
        -:  878:		state->numBuys++;
        -:  879:			
        -:  880:		//Each other player draws a card
        -:  881:		for (i = 0; i < state->numPlayers; i++){
        -:  882:			if ( i != currentPlayer ){
        -:  883:				drawCard(i, state);
        -:  884:			}
        -:  885:		}
        -:  886:			
        -:  887:		//put played card in played card pile
        -:  888:		discardCard(handPos, currentPlayer, state, 0);
        -:  889:			
        -:  890:		return 0;
        -:  891:		*/	
        -:  892:    case feast:
        -:  893:		//gain card with cost up to 5
        -:  894:		//Backup hand
    #####:  895:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  896:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  897:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  898:		}
        -:  899:		//Backup hand
        -:  900:
        -:  901:		//Update Coins for Buy
    #####:  902:		updateCoins(currentPlayer, state, 5);
    #####:  903:		x = 1;//Condition to loop on
    #####:  904:		while( x == 1) {//Buy one card
    #####:  905:			if (supplyCount(choice1, state) <= 0){
        -:  906:				if (DEBUG){
        -:  907:				printf("None of that card left, sorry!\n");
        -:  908:				}
        -:  909:				if (DEBUG){
        -:  910:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  911:				}
        -:  912:			}	
    #####:  913:			else if (state->coins < getCost(choice1)){
    #####:  914:				printf("That card is too expensive!\n");
        -:  915:
        -:  916:				if (DEBUG){
        -:  917:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  918:				}
        -:  919:			}
        -:  920:			else{
        -:  921:
        -:  922:				if (DEBUG){
        -:  923:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  924:				}
        -:  925:
    #####:  926:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  927:				x = 0;//No more buying cards
        -:  928:
        -:  929:				if (DEBUG){
        -:  930:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  931:				}
        -:  932:
        -:  933:			}	
        -:  934:		}     
        -:  935:
        -:  936:		//Reset Hand
    #####:  937:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  938:			state->hand[currentPlayer][i] = temphand[i];
    #####:  939:			temphand[i] = -1;
        -:  940:		}
        -:  941:		//Reset Hand
        -:  942:      			
    #####:  943:		return 0;
        -:  944:			
        -:  945:    case gardens:
    #####:  946:		return -1;
        -:  947:			
        -:  948:    case mine:
    #####:  949:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  950:
    #####:  951:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
    #####:  952:			return -1;
        -:  953:		}
        -:  954:		
    #####:  955:		if (choice2 > treasure_map || choice2 < curse){
    #####:  956:			return -1;
        -:  957:		}
        -:  958:
    #####:  959:		if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ){
    #####:  960:			return -1;
        -:  961:		}
        -:  962:
    #####:  963:		gainCard(choice2, state, 2, currentPlayer);
        -:  964:
        -:  965:		//discard card from hand
    #####:  966:		discardCard(handPos, currentPlayer, state, 0);
        -:  967:
        -:  968:		//discard trashed card
    #####:  969:		for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  970:			if (state->hand[currentPlayer][i] == j){
    #####:  971:				discardCard(i, currentPlayer, state, 0);			
    #####:  972:				break;
        -:  973:			}
        -:  974:		}
        -:  975:			
    #####:  976:		return 0;
        -:  977:			
        -:  978:    case remodel:
        6:  979:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  980:
        6:  981:		if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
        4:  982:			return -1;
        -:  983:		}
        -:  984:
        2:  985:		gainCard(choice2, state, 0, currentPlayer);
        -:  986:
        -:  987:		//discard card from hand
        2:  988:		discardCard(handPos, currentPlayer, state, 0);
        -:  989:
        -:  990:		//discard trashed card
        2:  991:		for (i = 0; i < state->handCount[currentPlayer]; i++){
        2:  992:			if (state->hand[currentPlayer][i] == j){
        2:  993:				discardCard(i, currentPlayer, state, 0);			
        2:  994:				break;
        -:  995:			}
        -:  996:		}
        -:  997:
        2:  998:		return 0;
        -:  999:		
        -: 1000:    case smithy:
       12: 1001:		cardEffectReturn = cardEffectSmithy(state,handPos);
       12: 1002:		return cardEffectReturn;
        -: 1003:	/*  //+3 Cards
        -: 1004:		for (i = 0; i < 3; i++){
        -: 1005:			drawCard(currentPlayer, state);
        -: 1006:		}
        -: 1007:			
        -: 1008:		//discard card from hand
        -: 1009:		discardCard(handPos, currentPlayer, state, 0);
        -: 1010:		return 0;
        -: 1011:	*/
        -: 1012:    case village:
      206: 1013:		cardEffectReturn = cardEffectVillage(state,handPos);
      206: 1014:		return cardEffectReturn;
        -: 1015:	/*  //+1 Card
        -: 1016:		drawCard(currentPlayer, state);
        -: 1017:			
        -: 1018:		//+2 Actions
        -: 1019:		state->numActions = state->numActions + 2;
        -: 1020:			
        -: 1021:		//discard played card from hand
        -: 1022:		discardCard(handPos, currentPlayer, state, 0);
        -: 1023:		return 0;
        -: 1024:	*/	
        -: 1025:    case baron:
    #####: 1026:		state->numBuys++;//Increase buys by 1!
    #####: 1027:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1028:			int p = 0;//Iterator for hand!
    #####: 1029:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1030:			while(card_not_discarded){
    #####: 1031:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1032:					state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1033:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1034:					state->discardCount[currentPlayer]++;
    #####: 1035:					for (;p < state->handCount[currentPlayer]; p++){
    #####: 1036:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1037:					}
    #####: 1038:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1039:					state->handCount[currentPlayer]--;
    #####: 1040:					card_not_discarded = 0;//Exit the loop
        -: 1041:				}
    #####: 1042:				else if (p > state->handCount[currentPlayer]){
        -: 1043:					if(DEBUG) {
        -: 1044:						printf("No estate cards in your hand, invalid choice\n");
        -: 1045:						printf("Must gain an estate if there are any\n");
        -: 1046:					}
    #####: 1047:					if (supplyCount(estate, state) > 0){
    #####: 1048:						gainCard(estate, state, 0, currentPlayer);
    #####: 1049:						state->supplyCount[estate]--;//Decrement estates
    #####: 1050:						if (supplyCount(estate, state) == 0){
    #####: 1051:							isGameOver(state);
        -: 1052:						}
        -: 1053:					}
    #####: 1054:				card_not_discarded = 0;//Exit the loop
        -: 1055:				}  
        -: 1056:				else{
    #####: 1057:					p++;//Next card
        -: 1058:				}
        -: 1059:			}
        -: 1060:		}	    
        -: 1061:		else{
    #####: 1062:			if (supplyCount(estate, state) > 0){
    #####: 1063:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1064:				state->supplyCount[estate]--;//Decrement Estates
    #####: 1065:				if (supplyCount(estate, state) == 0){
    #####: 1066:					isGameOver(state);
        -: 1067:				}
        -: 1068:			}
        -: 1069:		}
        -: 1070:	    
    #####: 1071:		return 0;
        -: 1072:		
        -: 1073:    case great_hall:
        6: 1074:		cardEffectReturn = cardEffectHall(state, handPos);
        6: 1075:		return cardEffectReturn;
        -: 1076:	/*  //+1 Card
        -: 1077:		drawCard(currentPlayer, state);
        -: 1078:			
        -: 1079:		//+1 Actions
        -: 1080:		state->numActions++;
        -: 1081:			
        -: 1082:		//discard card from hand
        -: 1083:		discardCard(handPos, currentPlayer, state, 0);
        -: 1084:		return 0;
        -: 1085:	*/	
        -: 1086:    case minion:
        -: 1087:		//+1 action
        6: 1088:		state->numActions++;
        -: 1089:			
        -: 1090:		//discard card from hand
        6: 1091:		discardCard(handPos, currentPlayer, state, 0);
        -: 1092:		//+2 coins	
        6: 1093:		if (choice1){
    #####: 1094:			state->coins = state->coins + 2;
        -: 1095:		}
        -: 1096:		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4	
        6: 1097:		else if (choice2){
        -: 1098:			//discard hand
       38: 1099:			while(numHandCards(state) > 0){
       26: 1100:				discardCard(handPos, currentPlayer, state, 0);
        -: 1101:			}
        -: 1102:				
        -: 1103:			//draw 4
       30: 1104:			for (i = 0; i < 4; i++){
       24: 1105:				drawCard(currentPlayer, state);
        -: 1106:			}
        -: 1107:				
        -: 1108:			//other players discard hand and redraw if hand size > 4
       18: 1109:			for (i = 0; i < state->numPlayers; i++){
       12: 1110:				if (i != currentPlayer){
        6: 1111:					if ( state->handCount[i] > 4 ){
        -: 1112:						//discard hand
       16: 1113:						while( state->handCount[i] > 0 ){
       12: 1114:							discardCard(handPos, i, state, 0);
        -: 1115:						}
        -: 1116:							
        -: 1117:						//draw 4
       10: 1118:						for (j = 0; j < 4; j++){
        8: 1119:							drawCard(i, state);
        -: 1120:						}
        -: 1121:					}
        -: 1122:				}
        -: 1123:			}
        -: 1124:				
        -: 1125:		}
        6: 1126:		return 0;
        -: 1127:		
        -: 1128:    case steward:
    #####: 1129:		cardEffectReturn = cardEffectSteward(state, choice1, choice2, choice3, handPos);
    #####: 1130:		return cardEffectReturn; 
        -: 1131:	/*
        -: 1132:	if (choice1 == 1)
        -: 1133:	{
        -: 1134:	  //+2 cards
        -: 1135:	  drawCard(currentPlayer, state);
        -: 1136:	  drawCard(currentPlayer, state);
        -: 1137:	}
        -: 1138:      else if (choice1 == 2)
        -: 1139:	{
        -: 1140:	  //+2 coins
        -: 1141:	  state->coins = state->coins + 2;
        -: 1142:	}
        -: 1143:      else
        -: 1144:	{
        -: 1145:	  //trash 2 cards in hand
        -: 1146:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1147:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1148:	}
        -: 1149:			
        -: 1150:      //discard card from hand
        -: 1151:      discardCard(handPos, currentPlayer, state, 0);
        -: 1152:      return 0;
        -: 1153:	 */
        -: 1154:		
        -: 1155:    case tribute:
    #####: 1156:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1157:	if (state->deckCount[nextPlayer] > 0){
    #####: 1158:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1159:	  state->deckCount[nextPlayer]--;
        -: 1160:	}
    #####: 1161:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1162:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1163:	  state->discardCount[nextPlayer]--;
        -: 1164:	}
        -: 1165:	else{
        -: 1166:	  //No Card to Reveal
        -: 1167:	  if (DEBUG){
        -: 1168:	    printf("No cards to reveal\n");
        -: 1169:	  }
        -: 1170:	}
        -: 1171:      }
        -: 1172:	    
        -: 1173:      else{
    #####: 1174:	if (state->deckCount[nextPlayer] == 0){
    #####: 1175:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1176:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1177:	    state->deckCount[nextPlayer]++;
    #####: 1178:	    state->discard[nextPlayer][i] = -1;
    #####: 1179:	    state->discardCount[nextPlayer]--;
        -: 1180:	  }
        -: 1181:			    
    #####: 1182:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1183:	} 
    #####: 1184:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1185:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1186:	state->deckCount[nextPlayer]--;
    #####: 1187:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1188:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1189:	state->deckCount[nextPlayer]--;
        -: 1190:      }    
        -: 1191:		       
    #####: 1192:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1193:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1194:	state->playedCardCount++;
    #####: 1195:	tributeRevealedCards[1] = -1;
        -: 1196:      }
        -: 1197:
    #####: 1198:      for (i = 0; i <= 2; i ++){
    #####: 1199:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1200:	  state->coins += 2;
        -: 1201:	}
        -: 1202:		    
    #####: 1203:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1204:	  drawCard(currentPlayer, state);
    #####: 1205:	  drawCard(currentPlayer, state);
        -: 1206:	}
        -: 1207:	else{//Action Card
    #####: 1208:	  state->numActions = state->numActions + 2;
        -: 1209:	}
        -: 1210:      }
        -: 1211:	    
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case ambassador:
    #####: 1215:      j = 0;		//used to check if player has enough cards to discard
        -: 1216:
    #####: 1217:      if (choice2 > 2 || choice2 < 0)
        -: 1218:	{
    #####: 1219:	  return -1;				
        -: 1220:	}
        -: 1221:
    #####: 1222:      if (choice1 == handPos)
        -: 1223:	{
    #####: 1224:	  return -1;
        -: 1225:	}
        -: 1226:
    #####: 1227:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1228:	{
    #####: 1229:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1230:	    {
    #####: 1231:	      j++;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (j < choice2)
        -: 1235:	{
    #####: 1236:	  return -1;				
        -: 1237:	}
        -: 1238:
        -: 1239:      if (DEBUG) 
        -: 1240:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1241:
        -: 1242:      //increase supply count for choosen card by amount being discarded
    #####: 1243:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1244:			
        -: 1245:      //each other player gains a copy of revealed card
    #####: 1246:      for (i = 0; i < state->numPlayers; i++)
        -: 1247:	{
    #####: 1248:	  if (i != currentPlayer)
        -: 1249:	    {
    #####: 1250:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1251:	    }
        -: 1252:	}
        -: 1253:
        -: 1254:      //discard played card from hand
    #####: 1255:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1256:
        -: 1257:      //trash copies of cards returned to supply
    #####: 1258:      for (j = 0; j < choice2; j++)
        -: 1259:	{
    #####: 1260:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1261:	    {
    #####: 1262:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1263:		{
    #####: 1264:		  discardCard(i, currentPlayer, state, 1);
    #####: 1265:		  break;
        -: 1266:		}
        -: 1267:	    }
        -: 1268:	}			
        -: 1269:
    #####: 1270:      return 0;
        -: 1271:		
        -: 1272:    case cutpurse:
        -: 1273:
    #####: 1274:      updateCoins(currentPlayer, state, 2);
    #####: 1275:      for (i = 0; i < state->numPlayers; i++)
        -: 1276:	{
    #####: 1277:	  if (i != currentPlayer)
        -: 1278:	    {
    #####: 1279:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1280:		{
    #####: 1281:		  if (state->hand[i][j] == copper)
        -: 1282:		    {
    #####: 1283:		      discardCard(j, i, state, 0);
    #####: 1284:		      break;
        -: 1285:		    }
    #####: 1286:		  if (j == state->handCount[i])
        -: 1287:		    {
    #####: 1288:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1289:			{
        -: 1290:			  if (DEBUG)
        -: 1291:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1292:			}	
    #####: 1293:		      break;
        -: 1294:		    }		
        -: 1295:		}
        -: 1296:					
        -: 1297:	    }
        -: 1298:				
        -: 1299:	}				
        -: 1300:
        -: 1301:      //discard played card from hand
    #####: 1302:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1303:
    #####: 1304:      return 0;
        -: 1305:
        -: 1306:		
        -: 1307:    case embargo: 
        -: 1308:      //+2 Coins
    #####: 1309:      state->coins = state->coins + 2;
        -: 1310:			
        -: 1311:      //see if selected pile is in play
    #####: 1312:      if ( state->supplyCount[choice1] == -1 )
        -: 1313:	{
    #####: 1314:	  return -1;
        -: 1315:	}
        -: 1316:			
        -: 1317:      //add embargo token to selected supply pile
    #####: 1318:      state->embargoTokens[choice1]++;
        -: 1319:			
        -: 1320:      //trash card
    #####: 1321:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1322:      return 0;
        -: 1323:		
        -: 1324:    case outpost:
        -: 1325:      //set outpost flag
    #####: 1326:      state->outpostPlayed++;
        -: 1327:			
        -: 1328:      //discard card
    #####: 1329:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1330:      return 0;
        -: 1331:		
        -: 1332:    case salvager:
        -: 1333:      //+1 buy
    #####: 1334:      state->numBuys++;
        -: 1335:			
    #####: 1336:      if (choice1)
        -: 1337:	{
        -: 1338:	  //gain coins equal to trashed card
    #####: 1339:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1340:	  //trash card
    #####: 1341:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1342:	}
        -: 1343:			
        -: 1344:      //discard card
    #####: 1345:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1346:      return 0;
        -: 1347:		
        -: 1348:    case sea_hag:
    #####: 1349:      for (i = 0; i < state->numPlayers; i++){
    #####: 1350:	if (i != currentPlayer){
    #####: 1351:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1352:	  state->discardCount[i]++;
    #####: 1353:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1354:	}
        -: 1355:      }
    #####: 1356:      return 0;
        -: 1357:		
        -: 1358:    case treasure_map:
        -: 1359:		//search hand for another treasure_map
    #####: 1360:		index = -1;
    #####: 1361:		for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####: 1362:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
    #####: 1363:			index = i;
    #####: 1364:			break;
        -: 1365:			}
        -: 1366:		}
    #####: 1367:		if (index > -1){
        -: 1368:			//trash both treasure cards
    #####: 1369:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1370:			discardCard(index, currentPlayer, state, 1);
        -: 1371:
        -: 1372:			//gain 4 Gold cards
    #####: 1373:			for (i = 0; i < 4; i++){
    #####: 1374:				gainCard(gold, state, 1, currentPlayer);
        -: 1375:			}
        -: 1376:				
        -: 1377:			//return success
    #####: 1378:			return 1;
        -: 1379:		}
        -: 1380:			
        -: 1381:		//no second treasure_map found in hand
    #####: 1382:		return -1;
        -: 1383:    }
        -: 1384:	
    #####: 1385:  return -1;
        -: 1386:}
        -: 1387:
      278: 1388:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1389:{
        -: 1390:	
        -: 1391:  //if card is not trashed, added to Played pile 
      278: 1392:  if (trashFlag < 1)
        -: 1393:    {
        -: 1394:      //add card to played pile
      278: 1395:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      278: 1396:      state->playedCardCount++;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //set played card to -1
      278: 1400:  state->hand[currentPlayer][handPos] = -1;
        -: 1401:	
        -: 1402:  //remove card from player's hand
      278: 1403:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1404:    {
        -: 1405:      //reduce number of cards in hand
       10: 1406:      state->handCount[currentPlayer]--;
        -: 1407:    }
      268: 1408:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1409:    {
        -: 1410:      //reduce number of cards in hand
    #####: 1411:      state->handCount[currentPlayer]--;
        -: 1412:    }
        -: 1413:  else 	
        -: 1414:    {
        -: 1415:      //replace discarded card with last card in hand
      268: 1416:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1417:      //set last card to -1
      268: 1418:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1419:      //reduce number of cards in hand
      268: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
        -: 1422:	
      278: 1423:  return 0;
        -: 1424:}
        -: 1425:
        2: 1426:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1427:{
        -: 1428:  //Note: supplyPos is enum of choosen card
        -: 1429:	
        -: 1430:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1431:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1432:    {
    #####: 1433:      return -1;
        -: 1434:    }
        -: 1435:	
        -: 1436:  //added card for [whoseTurn] current player:
        -: 1437:  // toFlag = 0 : add to discard
        -: 1438:  // toFlag = 1 : add to deck
        -: 1439:  // toFlag = 2 : add to hand
        -: 1440:
        2: 1441:  if (toFlag == 1)
        -: 1442:    {
    #####: 1443:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1444:      state->deckCount[player]++;
        -: 1445:    }
        2: 1446:  else if (toFlag == 2)
        -: 1447:    {
    #####: 1448:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1449:      state->handCount[player]++;
        -: 1450:    }
        -: 1451:  else
        -: 1452:    {
        2: 1453:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1454:      state->discardCount[player]++;
        -: 1455:    }
        -: 1456:	
        -: 1457:  //decrease number in supply pile
        2: 1458:  state->supplyCount[supplyPos]--;
        -: 1459:	 
        2: 1460:  return 0;
        -: 1461:}
        -: 1462:
       16: 1463:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1464:{
        -: 1465:  int i;
        -: 1466:	
        -: 1467:  //reset coin count
       16: 1468:  state->coins = 0;
        -: 1469:
        -: 1470:  //add coins for each Treasure card in player's hand
       96: 1471:  for (i = 0; i < state->handCount[player]; i++)
        -: 1472:    {
       80: 1473:      if (state->hand[player][i] == copper)
        -: 1474:	{
       64: 1475:	  state->coins += 1;
        -: 1476:	}
       16: 1477:      else if (state->hand[player][i] == silver)
        -: 1478:	{
    #####: 1479:	  state->coins += 2;
        -: 1480:	}
       16: 1481:      else if (state->hand[player][i] == gold)
        -: 1482:	{
    #####: 1483:	  state->coins += 3;
        -: 1484:	}	
        -: 1485:    }	
        -: 1486:
        -: 1487:  //add bonus
       16: 1488:  state->coins += bonus;
        -: 1489:
       16: 1490:  return 0;
        -: 1491:}
        -: 1492:
        -: 1493:
        -: 1494://end of dominion.c
        -: 1495:
